{"ast":null,"code":"var _jsxFileName = \"/home/karenmok/fullstackopen/part1/src/exercise1.js\",\n  _s = $RefreshSig$();\nimport { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Button = ({\n  handleClick,\n  text\n}) => /*#__PURE__*/_jsxDEV(\"button\", {\n  onClick: handleClick,\n  children: text\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 4,\n  columnNumber: 5\n}, this);\n\n/*  1.7: unicafe step2\nconst App = () => {\n  // save clicks of each button to its own state\n  const [good, setGood] = useState(0)\n  const [neutral, setNeutral] = useState(0)\n  const [bad, setBad] = useState(0)\n\n  const [allClicks,setAll] = useState([])\n\n  const goodClick = () => {\n    setAll(allClicks.concat('g'))\n    setGood(good + 1)\n  }\n\n  const neutralClick = () => {\n    setAll(allClicks.concat('n'))\n    setNeutral(neutral + 1)\n  }\n\n  const badClick = () => {\n    setAll(allClicks.concat('b'))\n    setBad(bad + 1)\n  }\n\n  const calc = () => {\n    return [(good-bad)/allClicks.length,good/allClicks.length]\n  }\n\n  /* //错误写法\n  const funcClick = () => {\n    switch({text}) {\n        case 'good':\n            setGood(good + 1);\n            break;\n        case 'neutral':\n            setNeutral(neutral+1)\n            break;\n        case 'bad':\n            setBad(bad + 1);\n            break;\n        default:\n            alert('what?');\n    }\n  }*/\n/*\n  return (\n    <div>\n    <h1>give feedback</h1>\n    <Button handleClick={goodClick} text={'good'} />\n    <Button handleClick={neutralClick} text={'neutral'} />\n    <Button handleClick={badClick} text={'bad'} />\n    <h1>statistics</h1>\n    <p> good {good} </p>\n    <p> neutral {neutral} </p>\n    <p> bad {bad} </p>\n    <p> all  {allClicks.length}</p>\n    <p> average {calc()[0]} </p>\n    <p> positive {calc()[1]*100}% </p>\n    </div>\n  )\n}*/\n\n/* 1.8-1.9\nconst Statistics = ({good,neutral,bad,allClicks,calc}) => {\n    if (allClicks.length === 0) {\n        return (\n            <div>\n                No feedback given\n            </div>\n        )\n    }\n\n    return (\n    <div>\n        <p> good {good} </p>\n        <p> neutral {neutral} </p>\n        <p> bad {bad} </p>\n        <p> all  {allClicks.length}</p>\n        <p> average {calc()[0]} </p>\n        <p> positive {calc()[1]*100}% </p>\n    </div>\n    )\n}\n\n\nconst App = () => {\n    // save clicks of each button to its own state\n    const [good, setGood] = useState(0)\n    const [neutral, setNeutral] = useState(0)\n    const [bad, setBad] = useState(0)\n  \n    const [allClicks,setAll] = useState([])\n  \n    const goodClick = () => {\n      setAll(allClicks.concat('g'))\n      setGood(good + 1)\n    }\n  \n    const neutralClick = () => {\n      setAll(allClicks.concat('n'))\n      setNeutral(neutral + 1)\n    }\n  \n    const badClick = () => {\n      setAll(allClicks.concat('b'))\n      setBad(bad + 1)\n    }\n  \n    const calc = () => {\n      return [(good-bad)/allClicks.length,good/allClicks.length]\n    }\n\n    return (\n        <div>\n        <h1>give feedback</h1>\n        <Button handleClick={goodClick} text={'good'} />\n        <Button handleClick={neutralClick} text={'neutral'} />\n        <Button handleClick={badClick} text={'bad'} />\n        <h1>statistics</h1>\n        <Statistics good={good} neutral={neutral} bad={bad} allClicks={allClicks} calc={calc} />\n        </div>\n    )\n}\n*/\n_c = Button;\nconst StatisticLine = ({\n  text,\n  value\n}) => {\n  /*#__PURE__*/_jsxDEV(\"p\", {\n    children: [\" \", text, \" \", value]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 135,\n    columnNumber: 5\n  }, this);\n};\n_c2 = StatisticLine;\nconst Statistics = ({\n  good,\n  neutral,\n  bad,\n  allClicks,\n  calc\n}) => {\n  if (allClicks.length === 0) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"No feedback given\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 13\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\" good \", good, \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\" neutral \", neutral, \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\" bad \", bad, \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\" all  \", allClicks.length]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\" average \", calc()[0], \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\" positive \", calc()[1] * 100, \"% \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(StatisticLine, {\n      children: \" >\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 148,\n    columnNumber: 5\n  }, this);\n};\n_c3 = Statistics;\nconst App = () => {\n  _s();\n  // save clicks of each button to its own state\n  const [good, setGood] = useState(0);\n  const [neutral, setNeutral] = useState(0);\n  const [bad, setBad] = useState(0);\n  const [allClicks, setAll] = useState([]);\n  const goodClick = () => {\n    setAll(allClicks.concat('g'));\n    setGood(good + 1);\n  };\n  const neutralClick = () => {\n    setAll(allClicks.concat('n'));\n    setNeutral(neutral + 1);\n  };\n  const badClick = () => {\n    setAll(allClicks.concat('b'));\n    setBad(bad + 1);\n  };\n  const calc = () => {\n    return [(good - bad) / allClicks.length, good / allClicks.length];\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"give feedback\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      handleClick: goodClick,\n      text: 'good'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      handleClick: neutralClick,\n      text: 'neutral'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      handleClick: badClick,\n      text: 'bad'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"statistics\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 194,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Statistics, {\n      good: good,\n      neutral: neutral,\n      bad: bad,\n      allClicks: allClicks,\n      calc: calc\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 195,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 189,\n    columnNumber: 9\n  }, this);\n};\n_s(App, \"DpiSS1BVbqUGQzOLdO5k5XPgpCw=\");\n_c4 = App;\nexport default App;\nvar _c, _c2, _c3, _c4;\n$RefreshReg$(_c, \"Button\");\n$RefreshReg$(_c2, \"StatisticLine\");\n$RefreshReg$(_c3, \"Statistics\");\n$RefreshReg$(_c4, \"App\");","map":{"version":3,"names":["useState","jsxDEV","_jsxDEV","Button","handleClick","text","onClick","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","StatisticLine","value","_c2","Statistics","good","neutral","bad","allClicks","calc","length","_c3","App","_s","setGood","setNeutral","setBad","setAll","goodClick","concat","neutralClick","badClick","_c4","$RefreshReg$"],"sources":["/home/karenmok/fullstackopen/part1/src/exercise1.js"],"sourcesContent":["import { useState } from 'react'\n\nconst Button = ({ handleClick, text }) => (\n    <button onClick={handleClick}>\n      {text}\n    </button>\n)\n\n/*  1.7: unicafe step2\nconst App = () => {\n  // save clicks of each button to its own state\n  const [good, setGood] = useState(0)\n  const [neutral, setNeutral] = useState(0)\n  const [bad, setBad] = useState(0)\n\n  const [allClicks,setAll] = useState([])\n\n  const goodClick = () => {\n    setAll(allClicks.concat('g'))\n    setGood(good + 1)\n  }\n\n  const neutralClick = () => {\n    setAll(allClicks.concat('n'))\n    setNeutral(neutral + 1)\n  }\n\n  const badClick = () => {\n    setAll(allClicks.concat('b'))\n    setBad(bad + 1)\n  }\n\n  const calc = () => {\n    return [(good-bad)/allClicks.length,good/allClicks.length]\n  }\n\n  /* //错误写法\n  const funcClick = () => {\n    switch({text}) {\n        case 'good':\n            setGood(good + 1);\n            break;\n        case 'neutral':\n            setNeutral(neutral+1)\n            break;\n        case 'bad':\n            setBad(bad + 1);\n            break;\n        default:\n            alert('what?');\n    }\n  }*/\n/*\n  return (\n    <div>\n    <h1>give feedback</h1>\n    <Button handleClick={goodClick} text={'good'} />\n    <Button handleClick={neutralClick} text={'neutral'} />\n    <Button handleClick={badClick} text={'bad'} />\n    <h1>statistics</h1>\n    <p> good {good} </p>\n    <p> neutral {neutral} </p>\n    <p> bad {bad} </p>\n    <p> all  {allClicks.length}</p>\n    <p> average {calc()[0]} </p>\n    <p> positive {calc()[1]*100}% </p>\n    </div>\n  )\n}*/\n\n/* 1.8-1.9\nconst Statistics = ({good,neutral,bad,allClicks,calc}) => {\n    if (allClicks.length === 0) {\n        return (\n            <div>\n                No feedback given\n            </div>\n        )\n    }\n\n    return (\n    <div>\n        <p> good {good} </p>\n        <p> neutral {neutral} </p>\n        <p> bad {bad} </p>\n        <p> all  {allClicks.length}</p>\n        <p> average {calc()[0]} </p>\n        <p> positive {calc()[1]*100}% </p>\n    </div>\n    )\n}\n\n\nconst App = () => {\n    // save clicks of each button to its own state\n    const [good, setGood] = useState(0)\n    const [neutral, setNeutral] = useState(0)\n    const [bad, setBad] = useState(0)\n  \n    const [allClicks,setAll] = useState([])\n  \n    const goodClick = () => {\n      setAll(allClicks.concat('g'))\n      setGood(good + 1)\n    }\n  \n    const neutralClick = () => {\n      setAll(allClicks.concat('n'))\n      setNeutral(neutral + 1)\n    }\n  \n    const badClick = () => {\n      setAll(allClicks.concat('b'))\n      setBad(bad + 1)\n    }\n  \n    const calc = () => {\n      return [(good-bad)/allClicks.length,good/allClicks.length]\n    }\n\n    return (\n        <div>\n        <h1>give feedback</h1>\n        <Button handleClick={goodClick} text={'good'} />\n        <Button handleClick={neutralClick} text={'neutral'} />\n        <Button handleClick={badClick} text={'bad'} />\n        <h1>statistics</h1>\n        <Statistics good={good} neutral={neutral} bad={bad} allClicks={allClicks} calc={calc} />\n        </div>\n    )\n}\n*/\n\nconst StatisticLine = ({text,value}) => {\n    <p> {text} {value}</p>\n}\n\nconst Statistics = ({good,neutral,bad,allClicks,calc}) => {\n    if (allClicks.length === 0) {\n        return (\n            <div>\n                No feedback given\n            </div>\n        )\n    }\n\n    return (\n    <div>\n        <p> good {good} </p>\n        <p> neutral {neutral} </p>\n        <p> bad {bad} </p>\n        <p> all  {allClicks.length}</p>\n        <p> average {calc()[0]} </p>\n        <p> positive {calc()[1]*100}% </p>\n        <StatisticLine> ></StatisticLine>\n    </div>\n    )\n}\n\n\nconst App = () => {\n    // save clicks of each button to its own state\n    const [good, setGood] = useState(0)\n    const [neutral, setNeutral] = useState(0)\n    const [bad, setBad] = useState(0)\n  \n    const [allClicks,setAll] = useState([])\n  \n    const goodClick = () => {\n      setAll(allClicks.concat('g'))\n      setGood(good + 1)\n    }\n  \n    const neutralClick = () => {\n      setAll(allClicks.concat('n'))\n      setNeutral(neutral + 1)\n    }\n  \n    const badClick = () => {\n      setAll(allClicks.concat('b'))\n      setBad(bad + 1)\n    }\n  \n    const calc = () => {\n      return [(good-bad)/allClicks.length,good/allClicks.length]\n    }\n\n    return (\n        <div>\n        <h1>give feedback</h1>\n        <Button handleClick={goodClick} text={'good'} />\n        <Button handleClick={neutralClick} text={'neutral'} />\n        <Button handleClick={badClick} text={'bad'} />\n        <h1>statistics</h1>\n        <Statistics good={good} neutral={neutral} bad={bad} allClicks={allClicks} calc={calc} />\n        </div>\n    )\n}\n\n\nexport default App"],"mappings":";;AAAA,SAASA,QAAQ,QAAQ,OAAO;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEhC,MAAMC,MAAM,GAAGA,CAAC;EAAEC,WAAW;EAAEC;AAAK,CAAC,kBACjCH,OAAA;EAAQI,OAAO,EAAEF,WAAY;EAAAG,QAAA,EAC1BF;AAAI;EAAAG,QAAA,EAAAC,YAAA;EAAAC,UAAA;EAAAC,YAAA;AAAA,OACC,CACX;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA7DAC,EAAA,GApEMT,MAAM;AAmIZ,MAAMU,aAAa,GAAGA,CAAC;EAACR,IAAI;EAACS;AAAK,CAAC,KAAK;EACpC,aAAAZ,OAAA;IAAAK,QAAA,GAAG,GAAC,EAACF,IAAI,EAAC,GAAC,EAACS,KAAK;EAAA;IAAAN,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAI,CAAC;AAC1B,CAAC;AAAAI,GAAA,GAFKF,aAAa;AAInB,MAAMG,UAAU,GAAGA,CAAC;EAACC,IAAI;EAACC,OAAO;EAACC,GAAG;EAACC,SAAS;EAACC;AAAI,CAAC,KAAK;EACtD,IAAID,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"},"metadata":{},"sourceType":"module","externalDependencies":[]}