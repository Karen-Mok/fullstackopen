{"ast":null,"code":"var _jsxFileName = \"/home/karenmok/fullstackopen/part1/src/exercise1.js\",\n  _s = $RefreshSig$();\nimport { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Button = ({\n  handleClick,\n  text\n}) => /*#__PURE__*/_jsxDEV(\"button\", {\n  onClick: handleClick,\n  children: text\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 4,\n  columnNumber: 5\n}, this);\n\n/*  1.7: unicafe step2\nconst App = () => {\n  // save clicks of each button to its own state\n  const [good, setGood] = useState(0)\n  const [neutral, setNeutral] = useState(0)\n  const [bad, setBad] = useState(0)\n\n  const [allClicks,setAll] = useState([])\n\n  const goodClick = () => {\n    setAll(allClicks.concat('g'))\n    setGood(good + 1)\n  }\n\n  const neutralClick = () => {\n    setAll(allClicks.concat('n'))\n    setNeutral(neutral + 1)\n  }\n\n  const badClick = () => {\n    setAll(allClicks.concat('b'))\n    setBad(bad + 1)\n  }\n\n  const calc = () => {\n    return [(good-bad)/allClicks.length,good/allClicks.length]\n  }\n\n  /* //错误写法\n  const funcClick = () => {\n    switch({text}) {\n        case 'good':\n            setGood(good + 1);\n            break;\n        case 'neutral':\n            setNeutral(neutral+1)\n            break;\n        case 'bad':\n            setBad(bad + 1);\n            break;\n        default:\n            alert('what?');\n    }\n  }*/\n/*\n  return (\n    <div>\n    <h1>give feedback</h1>\n    <Button handleClick={goodClick} text={'good'} />\n    <Button handleClick={neutralClick} text={'neutral'} />\n    <Button handleClick={badClick} text={'bad'} />\n    <h1>statistics</h1>\n    <p> good {good} </p>\n    <p> neutral {neutral} </p>\n    <p> bad {bad} </p>\n    <p> all  {allClicks.length}</p>\n    <p> average {calc()[0]} </p>\n    <p> positive {calc()[1]*100}% </p>\n    </div>\n  )\n}*/\n_c = Button;\nconst Statistics = props => {};\n_c2 = Statistics;\nconst App = () => {\n  _s();\n  // save clicks of each button to its own state\n  const [good, setGood] = useState(0);\n  const [neutral, setNeutral] = useState(0);\n  const [bad, setBad] = useState(0);\n  const [allClicks, setAll] = useState([]);\n  const goodClick = () => {\n    setAll(allClicks.concat('g'));\n    setGood(good + 1);\n  };\n  const neutralClick = () => {\n    setAll(allClicks.concat('n'));\n    setNeutral(neutral + 1);\n  };\n  const badClick = () => {\n    setAll(allClicks.concat('b'));\n    setBad(bad + 1);\n  };\n  const calc = () => {\n    return [(good - bad) / allClicks.length, good / allClicks.length];\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"give feedback\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      handleClick: goodClick,\n      text: 'good'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      handleClick: neutralClick,\n      text: 'neutral'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      handleClick: badClick,\n      text: 'bad'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"statistics\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\" good \", good, \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\" neutral \", neutral, \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\" bad \", bad, \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\" all  \", allClicks.length]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\" average \", calc()[0], \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\" positive \", calc()[1] * 100, \"% \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 103,\n    columnNumber: 9\n  }, this);\n};\n_s(App, \"DpiSS1BVbqUGQzOLdO5k5XPgpCw=\");\n_c3 = App;\nexport default App;\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"Button\");\n$RefreshReg$(_c2, \"Statistics\");\n$RefreshReg$(_c3, \"App\");","map":{"version":3,"names":["useState","jsxDEV","_jsxDEV","Button","handleClick","text","onClick","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","Statistics","props","_c2","App","_s","good","setGood","neutral","setNeutral","bad","setBad","allClicks","setAll","goodClick","concat","neutralClick","badClick","calc","length","_c3","$RefreshReg$"],"sources":["/home/karenmok/fullstackopen/part1/src/exercise1.js"],"sourcesContent":["import { useState } from 'react'\n\nconst Button = ({ handleClick, text }) => (\n    <button onClick={handleClick}>\n      {text}\n    </button>\n)\n\n/*  1.7: unicafe step2\nconst App = () => {\n  // save clicks of each button to its own state\n  const [good, setGood] = useState(0)\n  const [neutral, setNeutral] = useState(0)\n  const [bad, setBad] = useState(0)\n\n  const [allClicks,setAll] = useState([])\n\n  const goodClick = () => {\n    setAll(allClicks.concat('g'))\n    setGood(good + 1)\n  }\n\n  const neutralClick = () => {\n    setAll(allClicks.concat('n'))\n    setNeutral(neutral + 1)\n  }\n\n  const badClick = () => {\n    setAll(allClicks.concat('b'))\n    setBad(bad + 1)\n  }\n\n  const calc = () => {\n    return [(good-bad)/allClicks.length,good/allClicks.length]\n  }\n\n  /* //错误写法\n  const funcClick = () => {\n    switch({text}) {\n        case 'good':\n            setGood(good + 1);\n            break;\n        case 'neutral':\n            setNeutral(neutral+1)\n            break;\n        case 'bad':\n            setBad(bad + 1);\n            break;\n        default:\n            alert('what?');\n    }\n  }*/\n/*\n  return (\n    <div>\n    <h1>give feedback</h1>\n    <Button handleClick={goodClick} text={'good'} />\n    <Button handleClick={neutralClick} text={'neutral'} />\n    <Button handleClick={badClick} text={'bad'} />\n    <h1>statistics</h1>\n    <p> good {good} </p>\n    <p> neutral {neutral} </p>\n    <p> bad {bad} </p>\n    <p> all  {allClicks.length}</p>\n    <p> average {calc()[0]} </p>\n    <p> positive {calc()[1]*100}% </p>\n    </div>\n  )\n}*/\n\nconst Statistics = (props) => {\n    \n}\n\nconst App = () => {\n    // save clicks of each button to its own state\n    const [good, setGood] = useState(0)\n    const [neutral, setNeutral] = useState(0)\n    const [bad, setBad] = useState(0)\n  \n    const [allClicks,setAll] = useState([])\n  \n    const goodClick = () => {\n      setAll(allClicks.concat('g'))\n      setGood(good + 1)\n    }\n  \n    const neutralClick = () => {\n      setAll(allClicks.concat('n'))\n      setNeutral(neutral + 1)\n    }\n  \n    const badClick = () => {\n      setAll(allClicks.concat('b'))\n      setBad(bad + 1)\n    }\n  \n    const calc = () => {\n      return [(good-bad)/allClicks.length,good/allClicks.length]\n    }\n\n    return (\n        <div>\n        <h1>give feedback</h1>\n        <Button handleClick={goodClick} text={'good'} />\n        <Button handleClick={neutralClick} text={'neutral'} />\n        <Button handleClick={badClick} text={'bad'} />\n        <h1>statistics</h1>\n        <p> good {good} </p>\n        <p> neutral {neutral} </p>\n        <p> bad {bad} </p>\n        <p> all  {allClicks.length}</p>\n        <p> average {calc()[0]} </p>\n        <p> positive {calc()[1]*100}% </p>\n        </div>\n    )\n}\n\n\n\nexport default App"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}