{"ast":null,"code":"var _jsxFileName = \"/home/karenmok/fullstackopen/part1/src/exercise1.js\";\nimport { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Button = ({\n  handleClick,\n  text\n}) => /*#__PURE__*/_jsxDEV(\"button\", {\n  onClick: handleClick,\n  children: text\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 4,\n  columnNumber: 5\n}, this);\n\n/*  1.7: unicafe step2\nconst App = () => {\n  // save clicks of each button to its own state\n  const [good, setGood] = useState(0)\n  const [neutral, setNeutral] = useState(0)\n  const [bad, setBad] = useState(0)\n\n  const [allClicks,setAll] = useState([])\n\n  const goodClick = () => {\n    setAll(allClicks.concat('g'))\n    setGood(good + 1)\n  }\n\n  const neutralClick = () => {\n    setAll(allClicks.concat('n'))\n    setNeutral(neutral + 1)\n  }\n\n  const badClick = () => {\n    setAll(allClicks.concat('b'))\n    setBad(bad + 1)\n  }\n\n  const calc = () => {\n    return [(good-bad)/allClicks.length,good/allClicks.length]\n  }\n\n  /* //错误写法\n  const funcClick = () => {\n    switch({text}) {\n        case 'good':\n            setGood(good + 1);\n            break;\n        case 'neutral':\n            setNeutral(neutral+1)\n            break;\n        case 'bad':\n            setBad(bad + 1);\n            break;\n        default:\n            alert('what?');\n    }\n  }*/\n/*\n  return (\n    <div>\n    <h1>give feedback</h1>\n    <Button handleClick={goodClick} text={'good'} />\n    <Button handleClick={neutralClick} text={'neutral'} />\n    <Button handleClick={badClick} text={'bad'} />\n    <h1>statistics</h1>\n    <p> good {good} </p>\n    <p> neutral {neutral} </p>\n    <p> bad {bad} </p>\n    <p> all  {allClicks.length}</p>\n    <p> average {calc()[0]} </p>\n    <p> positive {calc()[1]*100}% </p>\n    </div>\n  )\n}*/\n\n/* 1.8-1.9\nconst Statistics = ({good,neutral,bad,allClicks,calc}) => {\n    if (allClicks.length === 0) {\n        return (\n            <div>\n                No feedback given\n            </div>\n        )\n    }\n\n    return (\n    <div>\n        <p> good {good} </p>\n        <p> neutral {neutral} </p>\n        <p> bad {bad} </p>\n        <p> all  {allClicks.length}</p>\n        <p> average {calc()[0]} </p>\n        <p> positive {calc()[1]*100}% </p>\n    </div>\n    )\n}\n\n\nconst App = () => {\n    // save clicks of each button to its own state\n    const [good, setGood] = useState(0)\n    const [neutral, setNeutral] = useState(0)\n    const [bad, setBad] = useState(0)\n  \n    const [allClicks,setAll] = useState([])\n  \n    const goodClick = () => {\n      setAll(allClicks.concat('g'))\n      setGood(good + 1)\n    }\n  \n    const neutralClick = () => {\n      setAll(allClicks.concat('n'))\n      setNeutral(neutral + 1)\n    }\n  \n    const badClick = () => {\n      setAll(allClicks.concat('b'))\n      setBad(bad + 1)\n    }\n  \n    const calc = () => {\n      return [(good-bad)/allClicks.length,good/allClicks.length]\n    }\n\n    return (\n        <div>\n        <h1>give feedback</h1>\n        <Button handleClick={goodClick} text={'good'} />\n        <Button handleClick={neutralClick} text={'neutral'} />\n        <Button handleClick={badClick} text={'bad'} />\n        <h1>statistics</h1>\n        <Statistics good={good} neutral={neutral} bad={bad} allClicks={allClicks} calc={calc} />\n        </div>\n    )\n}\n*/\n_c = Button;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"Button\");","map":{"version":3,"names":["useState","jsxDEV","_jsxDEV","Button","handleClick","text","onClick","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","App","$RefreshReg$"],"sources":["/home/karenmok/fullstackopen/part1/src/exercise1.js"],"sourcesContent":["import { useState } from 'react'\n\nconst Button = ({ handleClick, text }) => (\n    <button onClick={handleClick}>\n      {text}\n    </button>\n)\n\n/*  1.7: unicafe step2\nconst App = () => {\n  // save clicks of each button to its own state\n  const [good, setGood] = useState(0)\n  const [neutral, setNeutral] = useState(0)\n  const [bad, setBad] = useState(0)\n\n  const [allClicks,setAll] = useState([])\n\n  const goodClick = () => {\n    setAll(allClicks.concat('g'))\n    setGood(good + 1)\n  }\n\n  const neutralClick = () => {\n    setAll(allClicks.concat('n'))\n    setNeutral(neutral + 1)\n  }\n\n  const badClick = () => {\n    setAll(allClicks.concat('b'))\n    setBad(bad + 1)\n  }\n\n  const calc = () => {\n    return [(good-bad)/allClicks.length,good/allClicks.length]\n  }\n\n  /* //错误写法\n  const funcClick = () => {\n    switch({text}) {\n        case 'good':\n            setGood(good + 1);\n            break;\n        case 'neutral':\n            setNeutral(neutral+1)\n            break;\n        case 'bad':\n            setBad(bad + 1);\n            break;\n        default:\n            alert('what?');\n    }\n  }*/\n/*\n  return (\n    <div>\n    <h1>give feedback</h1>\n    <Button handleClick={goodClick} text={'good'} />\n    <Button handleClick={neutralClick} text={'neutral'} />\n    <Button handleClick={badClick} text={'bad'} />\n    <h1>statistics</h1>\n    <p> good {good} </p>\n    <p> neutral {neutral} </p>\n    <p> bad {bad} </p>\n    <p> all  {allClicks.length}</p>\n    <p> average {calc()[0]} </p>\n    <p> positive {calc()[1]*100}% </p>\n    </div>\n  )\n}*/\n\n/* 1.8-1.9\nconst Statistics = ({good,neutral,bad,allClicks,calc}) => {\n    if (allClicks.length === 0) {\n        return (\n            <div>\n                No feedback given\n            </div>\n        )\n    }\n\n    return (\n    <div>\n        <p> good {good} </p>\n        <p> neutral {neutral} </p>\n        <p> bad {bad} </p>\n        <p> all  {allClicks.length}</p>\n        <p> average {calc()[0]} </p>\n        <p> positive {calc()[1]*100}% </p>\n    </div>\n    )\n}\n\n\nconst App = () => {\n    // save clicks of each button to its own state\n    const [good, setGood] = useState(0)\n    const [neutral, setNeutral] = useState(0)\n    const [bad, setBad] = useState(0)\n  \n    const [allClicks,setAll] = useState([])\n  \n    const goodClick = () => {\n      setAll(allClicks.concat('g'))\n      setGood(good + 1)\n    }\n  \n    const neutralClick = () => {\n      setAll(allClicks.concat('n'))\n      setNeutral(neutral + 1)\n    }\n  \n    const badClick = () => {\n      setAll(allClicks.concat('b'))\n      setBad(bad + 1)\n    }\n  \n    const calc = () => {\n      return [(good-bad)/allClicks.length,good/allClicks.length]\n    }\n\n    return (\n        <div>\n        <h1>give feedback</h1>\n        <Button handleClick={goodClick} text={'good'} />\n        <Button handleClick={neutralClick} text={'neutral'} />\n        <Button handleClick={badClick} text={'bad'} />\n        <h1>statistics</h1>\n        <Statistics good={good} neutral={neutral} bad={bad} allClicks={allClicks} calc={calc} />\n        </div>\n    )\n}\n*/\n\n\n\n\nexport default App"],"mappings":";AAAA,SAASA,QAAQ,QAAQ,OAAO;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEhC,MAAMC,MAAM,GAAGA,CAAC;EAAEC,WAAW;EAAEC;AAAK,CAAC,kBACjCH,OAAA;EAAQI,OAAO,EAAEF,WAAY;EAAAG,QAAA,EAC1BF;AAAI;EAAAG,QAAA,EAAAC,YAAA;EAAAC,UAAA;EAAAC,YAAA;AAAA,OACC,CACX;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA7DAC,EAAA,GApEMT,MAAM;AAsIZ,eAAeU,GAAG;AAAA,IAAAD,EAAA;AAAAE,YAAA,CAAAF,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}